#include <iostream>
#include <string>
using namespace std;

class Solution {


    /*
    You are given two strings s and t.
    String t is generated by random shuffling string s 
    and then add one more letter at a random position.

    Return the letter that was added to t.
    */

    /*
    Pseudocode:
    Simple:
        Add all chars from s to an array
        go through all chars from t until finding one that isn't in s
            What to do if multiple of same letter are there?

    Intermediate:   
    Sort both s and t alphabetically
        Add each char to a hash table
    Pop them off alphabetically until they don't pop the same letter off

    Expert:
    Calculate hash value of each string, base 26
    Subtract the two hash values
    Difference = the extra letter
    Basically the same words, so collisions not possible


    */
    public:
    static int ascii(char c) {
        return int(c);
    }

    static char findTheDifference(string s, string t) {
         int num_s = 0;
         int num_t = 0;
         
         for (char c : s) {
            num_s += int(c);
         }
         for (char c : t) {
            num_t += int(c);
         }
        
        return char(num_t - num_s);
    }
};

/*TESTING*/
int main() {
    
    string s1 = "abcd";
    string t1 = "abcde";
    string s2 = "aabbccddeeffgghhiijjkk";
    string t2 = "aabbccddeeffgghhiijjkkw";
    string t3 = "aabbccdddeeffgghhiijjkk";

    cout << "s1 - t1: " << Solution::findTheDifference(s1, t1) << endl;
    cout << "s2 - t2: " << Solution::findTheDifference(s2, t2) << endl;
    cout << "s2 - t3: " << Solution::findTheDifference(s2, t3) << endl;
    return 0;
}